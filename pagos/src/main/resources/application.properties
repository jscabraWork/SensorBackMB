spring.application.name=microservicio-pagos
server.port=${PORT:0}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.generate-ddl=true
logging.level.org.hibernate.SQL=debug
logging.level.com.arquitectura=DEBUG
logging.level.org.springframework.web=DEBUG

eureka.instance.instance-id=${spring.application.name}:${random.value}

spring.profiles.active=dev


#NOMBRES DE TOPICS
# Este es el sufijo que se le agrega a los topics para diferenciarlos entre ambientes
topic.suffix=sensor-mb

alcancias.topic=crear-modificar-alcancias-${topic.suffix}-topic

#Tickets
tickets.topic=crear-modificar-tickets-${topic.suffix}-topic
tickets-promotor.topic=crear-modificar-tickets-promotor-${topic.suffix}-topic
tickets-puntosF.topic=crear-modificar-tickets-puntosF-${topic.suffix}-topic
ingresos.topic=crear-modificar-ingresos-${topic.suffix}-topic
servicios.topic=crear-modificar-servicios-${topic.suffix}-topic
seguros.topic=crear-modificar-seguros-${topic.suffix}-topic

#Ordenes
ordenes.topic=crear-modificar-ordenes-${topic.suffix}-topic
ordenes.alcancias.topic=crear-modificar-ordenes-alcancias-${topic.suffix}-topic
ordenes.adicionales.topic=crear-modificar-ordenes-adicionales-${topic.suffix}-topic
ordenes.promotores.topic=crear-modificar-ordenes-promotores-${topic.suffix}-topic
ordenes.puntosF.topic=crear-modificar-ordenes-puntosF-${topic.suffix}-topic
ordenes.traspaso.topic=crear-modificar-ordenes-traspaso-${topic.suffix}-topic
transacciones.topic=crear-modificar-transacciones-${topic.suffix}-topic

#Eventos
eventos.topic=crear-modificar-eventos-${topic.suffix}-topic
tipos-eventos.topic=crear-modificar-tipos-eventos-${topic.suffix}-topic
dias.topic=crear-modificar-dias-${topic.suffix}-topic
tarifas.topic=crear-modificar-tarifas-${topic.suffix}-topic
temporadas.topic=crear-modificar-temporadas-${topic.suffix}-topic
localidades.topic=crear-modificar-localidades-${topic.suffix}-topic
imagenes.topic=crear-modificar-imagenes-${topic.suffix}-topic
ciudades.topic=crear-modificar-ciudad-${topic.suffix}-topic
venues.topic=crear-modificar-venues-${topic.suffix}-topic
coordinadores.topic=crear-modificar-coordinadores-${topic.suffix}-topic

#USUARIOS
clientes.topic=crear-modificar-clientes-${topic.suffix}-topic
organizador.topic=crear-modificar-organizador-${topic.suffix}-topic


spring.kafka.producer.key-serializer =org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.springframework.kafka.support.serializer.JsonSerializer

#esto es necesario para idempotence pero tener en cuenta que este valor es segun la configuracion del del topic
spring.kafka.producer.acks = all

spring.kafka.producer.properties..delivery.timeout.ms=120000
#Tiempo para enviar un lote de mensajes, ahora lo dejo en 0 por que quiero que sea instantaneo pero en pagos sera diferente
spring.kafka.producer.properties.linger.ms=0
spring.kafka.producer.properties.request.timeout.ms=30000

#Esto es true por defecto pero es mejor dejarlo explicito
spring.kafka.producer.properties.enable.idempotence=true

spring.kafka.producer.properties.max.in.flight.request.per.connection=5

spring.kafka.producer.transaction-id-prefix=pagos-service-${random.value}-

#Solo para KafkaTransaction Manager
logging.level.org.springframework.kafka.transaction.KafkaTransactionManager=DEBUG
logging.level.org.springframework.transaction=DEBUG

#Para ver el de JPA y el de Kafka de manera internta
logging.level.org.apache.kafka.clients.producer.internals.TransactionManager=DEBUG

#Esta es importante para transacciones de JPA - TRACE
logging.level.org.springframework.orm.jpa.JpaTransactionManager=DEBUG
spring.kafka.admin.properties.auto.create.topics.enable=true

# CONFIGURACION CONSUMER KAFKA
spring.kafka.consumer.group-id=pagos-${topic.suffix}-consumer-events
spring.kafka.consumer.properties.spring.json.trusted.packages=com.arquitectura.*
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.isolation-level=READ_COMMITTED

#Imagenes AWS s3
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB
client_body_size_max=500MB
aws.access_key_id = AKIAZ4YTFVLRK5C6G2NU
aws.s3.bucket=codigos-sensor
aws.s3.region= us-east-1
spring.mail.default-encoding=UTF-8

logging.level.com.arquitectura.ticket.service=DEBUG
logging.level.com.arquitectura.clients=DEBUG
logging.level.org.springframework.cloud.openfeign=DEBUG
logging.level.feign=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
